name: Docker Image
on:
  push:
    tags:
      - dc3.develop.*
jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Print Workflow Information
        run: |
          echo "🚀 Starting Docker CI workflow"
          echo "📋 Workflow triggered by: ${{ github.event_name }}"
          echo "🏷️  Git ref: ${{ github.ref }}"
          echo "📦 Repository: ${{ github.repository }}"
          echo "🌟 Runner OS: ${{ runner.os }}"
          echo "⏰ Workflow started at: $(date)"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: 21
          cache: maven
          cache-dependency-path: "**/pom.xml"

      - name: Print Java Information
        run: |
          echo "☕ Java setup completed"
          echo "📋 Java version: $(java -version 2>&1 | head -n1)"
          echo "📋 Maven version: $(mvn -version | head -n1)"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Print Cache Information
        run: |
          echo "📦 Maven cache configured"
          echo "📋 Cache key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}"

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          echo "📋 Extracting project version from pom.xml..."
          echo "profile=pro" >> $GITHUB_OUTPUT
          VERSION=$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout)
          echo "service_version=$VERSION" >> $GITHUB_OUTPUT
          echo "✅ Successfully extracted version from pom.xml: $VERSION"
          echo "🏷️ Version will be used for GitHub Release: $VERSION"

      - name: Extract Variables
        id: variables
        run: |
          echo "📋 Setting up service variables..."
          echo "service_name_gateway=dc3-gateway" >> $GITHUB_OUTPUT
          echo "service_path_gateway=dc3-gateway" >> $GITHUB_OUTPUT
          echo "service_name_center_auth=dc3-center-auth" >> $GITHUB_OUTPUT
          echo "service_path_center_auth=dc3-center/dc3-center-auth" >> $GITHUB_OUTPUT
          echo "service_name_center_data=dc3-center-data" >> $GITHUB_OUTPUT
          echo "service_path_center_data=dc3-center/dc3-center-data" >> $GITHUB_OUTPUT
          echo "service_name_center_manager=dc3-center-manager" >> $GITHUB_OUTPUT
          echo "service_path_center_manager=dc3-center/dc3-center-manager" >> $GITHUB_OUTPUT
          echo "service_name_center_single=dc3-center-single" >> $GITHUB_OUTPUT
          echo "service_path_center_single=dc3-center/dc3-center-single" >> $GITHUB_OUTPUT
          echo "service_name_driver_listening_virtual=dc3-driver-listening-virtual" >> $GITHUB_OUTPUT
          echo "service_path_driver_listening_virtual=dc3-driver/dc3-driver-listening-virtual" >> $GITHUB_OUTPUT
          echo "service_name_driver_modbus_tcp=dc3-driver-modbus-tcp" >> $GITHUB_OUTPUT
          echo "service_path_driver_modbus_tcp=dc3-driver/dc3-driver-modbus-tcp" >> $GITHUB_OUTPUT
          echo "service_name_driver_mqtt=dc3-driver-mqtt" >> $GITHUB_OUTPUT
          echo "service_path_driver_mqtt=dc3-driver/dc3-driver-mqtt" >> $GITHUB_OUTPUT
          echo "service_name_driver_opc_da=dc3-driver-opc-da" >> $GITHUB_OUTPUT
          echo "service_path_driver_opc_da=dc3-driver/dc3-driver-opc-da" >> $GITHUB_OUTPUT
          echo "service_name_driver_opc_ua=dc3-driver-opc-ua" >> $GITHUB_OUTPUT
          echo "service_path_driver_opc_ua=dc3-driver/dc3-driver-opc-ua" >> $GITHUB_OUTPUT
          echo "service_name_driver_plcs7=dc3-driver-plcs7" >> $GITHUB_OUTPUT
          echo "service_path_driver_plcs7=dc3-driver/dc3-driver-plcs7" >> $GITHUB_OUTPUT
          echo "service_name_driver_virtual=dc3-driver-virtual" >> $GITHUB_OUTPUT
          echo "service_path_driver_virtual=dc3-driver/dc3-driver-virtual" >> $GITHUB_OUTPUT
          echo "docker_registry_default=pnoker" >> $GITHUB_OUTPUT
          echo "docker_registry_aliyun=registry.cn-beijing.aliyuncs.com/dc3" >> $GITHUB_OUTPUT
          echo "✅ All service variables configured successfully"

      - name: Print Service Configuration
        run: |
          echo "📋 Service Configuration Summary:"
          echo "  🌐 Default Registry: pnoker"
          echo "  🇨🇳 Aliyun Registry: registry.cn-beijing.aliyuncs.com/dc3"
          echo "  📦 Profile: pro"
          echo "  🏷️  Version: ${{ steps.extract_version.outputs.service_version }}"
          echo "  🚀 Services to build: Gateway, Center (Auth/Data/Manager/Single), Drivers (Listening Virtual, Modbus TCP, MQTT, OPC DA, OPC UA, PLC S7, Virtual)"

      - name: Build with Maven
        run: |
          echo "🔨 Starting Maven build..."
          echo "📋 Profile: ${{ steps.variables.outputs.profile }}"
          echo "📋 Maven command: mvn -U -e -B clean package -DskipTests -P ${{ steps.variables.outputs.profile }} --no-transfer-progress"
          mvn -U -e -B clean package -DskipTests -P ${{ steps.variables.outputs.profile }} --no-transfer-progress
          echo "✅ Maven build completed successfully"

      - name: List Workspace
        run: |
          echo "📁 Current workspace contents:"
          ls -la ${{ github.workspace }}
          echo "📁 Detailed workspace structure:"
          ls -R ${{ github.workspace }}

      - name: Set Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Print Docker Buildx Information
        run: |
          echo "🐳 Docker Buildx setup completed"
          echo "📋 Docker version: $(docker --version)"
          echo "📋 Docker Buildx version: $(docker buildx version)"

      - name: Set QEMU
        uses: docker/setup-qemu-action@v3

      - name: Print QEMU Information
        run: |
          echo "🔧 QEMU setup completed for multi-platform builds"
          echo "📋 Supported platforms: linux/arm64, linux/amd64"

      - name: Login Docker Default Registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Print Docker Login Information
        run: |
          echo "🔑 Successfully logged into Docker Hub"
          echo "📋 Username: ${{ vars.DOCKERHUB_USERNAME }}"
          echo "📋 Registry: Docker Hub (default)"

      - name: Login Docker Aliyun Registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-beijing.aliyuncs.com
          username: ${{ vars.ALIYUN_DOCKERHUB_USERNAME }}
          password: ${{ secrets.ALIYUN_DOCKERHUB_TOKEN }}

      - name: Print Aliyun Login Information
        run: |
          echo "🔑 Successfully logged into Aliyun Container Registry"
          echo "📋 Username: ${{ vars.ALIYUN_DOCKERHUB_USERNAME }}"
          echo "📋 Registry: registry.cn-beijing.aliyuncs.com"

      - name: Build and Push For Gateway
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_gateway }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_gateway }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_gateway }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_gateway }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_gateway }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_gateway }}:${{ steps.variables.outputs.service_version }}

      - name: Print Gateway Build Information
        run: |
          echo "✅ Gateway Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_gateway }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_gateway }}"
          echo "📋 Tags pushed:"
          echo "  - ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_gateway }}:latest"
          echo "  - ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_gateway }}:${{ steps.variables.outputs.service_version }}"
          echo "  - ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_gateway }}:latest"
          echo "  - ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_gateway }}:${{ steps.variables.outputs.service_version }}"

      - name: Build and Push For Center Auth
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_center_auth }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_center_auth }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_center_auth }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_center_auth }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_center_auth }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_center_auth }}:${{ steps.variables.outputs.service_version }}

      - name: Print Center Auth Build Information
        run: |
          echo "✅ Center Auth Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_center_auth }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_center_auth }}"

      - name: Build and Push For Center Data
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_center_data }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_center_data }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_center_data }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_center_data }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_center_data }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_center_data }}:${{ steps.variables.outputs.service_version }}

      - name: Print Center Data Build Information
        run: |
          echo "✅ Center Data Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_center_data }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_center_data }}"

      - name: Build and Push For Center Manager
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_center_manager }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_center_manager }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_center_manager }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_center_manager }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_center_manager }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_center_manager }}:${{ steps.variables.outputs.service_version }}

      - name: Print Center Manager Build Information
        run: |
          echo "✅ Center Manager Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_center_manager }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_center_manager }}"

      - name: Build and Push For Center Single
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_center_single }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_center_single }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_center_single }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_center_single }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_center_single }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_center_single }}:${{ steps.variables.outputs.service_version }}

      - name: Print Center Single Build Information
        run: |
          echo "✅ Center Single Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_center_single }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_center_single }}"

      - name: Build and Push For Driver Listening Virtual
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_listening_virtual }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_listening_virtual }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_listening_virtual }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_listening_virtual }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_listening_virtual }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_listening_virtual }}:${{ steps.variables.outputs.service_version }}

      - name: Print Driver Listening Virtual Build Information
        run: |
          echo "✅ Driver Listening Virtual Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_driver_listening_virtual }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_driver_listening_virtual }}"

      - name: Build and Push For Driver Modbus Tcp
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_modbus_tcp }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_modbus_tcp }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_modbus_tcp }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_modbus_tcp }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_modbus_tcp }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_modbus_tcp }}:${{ steps.variables.outputs.service_version }}

      - name: Print Driver Modbus Tcp Build Information
        run: |
          echo "✅ Driver Modbus Tcp Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_driver_modbus_tcp }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_driver_modbus_tcp }}"

      - name: Build and Push For Driver Mqtt
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_mqtt }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_mqtt }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_mqtt }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_mqtt }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_mqtt }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_mqtt }}:${{ steps.variables.outputs.service_version }}

      - name: Print Driver Mqtt Build Information
        run: |
          echo "✅ Driver Mqtt Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_driver_mqtt }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_driver_mqtt }}"

      - name: Build and Push For Driver Opc Da
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_opc_da }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_opc_da }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_opc_da }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_opc_da }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_opc_da }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_opc_da }}:${{ steps.variables.outputs.service_version }}

      - name: Print Driver Opc Da Build Information
        run: |
          echo "✅ Driver Opc Da Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_driver_opc_da }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_driver_opc_da }}"

      - name: Build and Push For Driver Opc Ua
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_opc_ua }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_opc_ua }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_opc_ua }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_opc_ua }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_opc_ua }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_opc_ua }}:${{ steps.variables.outputs.service_version }}

      - name: Print Driver Opc Ua Build Information
        run: |
          echo "✅ Driver Opc Ua Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_driver_opc_ua }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_driver_opc_ua }}"

      - name: Build and Push For Driver Plcs7
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_plcs7 }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_plcs7 }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_plcs7 }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_plcs7 }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_plcs7 }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_plcs7 }}:${{ steps.variables.outputs.service_version }}

      - name: Print Driver Plcs7 Build Information
        run: |
          echo "✅ Driver Plcs7 Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_driver_plcs7 }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_driver_plcs7 }}"

      - name: Build and Push For Driver Virtual
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_virtual }}
          platforms: linux/arm64,linux/amd64
          file: ${{ github.workspace }}/${{ steps.variables.outputs.service_path_driver_virtual }}/Dockerfile
          tags: |
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_virtual }}:latest
            ${{ steps.variables.outputs.docker_registry_default }}/${{ steps.variables.outputs.service_name_driver_virtual }}:${{ steps.variables.outputs.service_version }}
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_virtual }}:latest
            ${{ steps.variables.outputs.docker_registry_aliyun }}/${{ steps.variables.outputs.service_name_driver_virtual }}:${{ steps.variables.outputs.service_version }}

      - name: Print Driver Virtual Build Information
        run: |
          echo "✅ Driver Virtual Docker images built and pushed successfully"
          echo "📋 Service: ${{ steps.variables.outputs.service_name_driver_virtual }}"
          echo "📋 Context: ${{ steps.variables.outputs.service_path_driver_virtual }}"

      - name: Workflow Summary
        run: |
          echo "🎉 Docker CI workflow completed successfully!"
          echo "📋 Summary:"
          echo "  ✅ Total services built: 10"
          echo "  ✅ Gateway: dc3-gateway"
          echo "  ✅ Center services: dc3-center-auth, dc3-center-data, dc3-center-manager, dc3-center-single"
          echo "  ✅ Driver services: dc3-driver-listening-virtual, dc3-driver-modbus-tcp, dc3-driver-mqtt, dc3-driver-opc-da, dc3-driver-opc-ua, dc3-driver-plcs7, dc3-driver-virtual"
          echo "  🐳 All images pushed to Docker Hub and Aliyun Container Registry"
          echo "  🏷️  Version: ${{ steps.extract_version.outputs.service_version }}"
          echo "  ⏰ Workflow completed at: $(date)"
